#!/usr/bin/env bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "../../../dependencies/tools/rstudio-tools.sh"

# Build GWT sources, just in case?
OWD=$(pwd)
cd ../../gwt
ant build
cd ../node/desktop


# Try to find node, and place it on the PATH.
NODE_PATHS=(
   "${SCRIPT_DIR}/../../../dependencies/common/node/${RSTUDIO_NODE_DIR}/bin"
   "/opt/rstudio-tools/dependencies/common/node/${RSTUDIO_NODE_DIR}/bin"
)

for NODE_PATH in "${NODE_PATHS[@]}"; do
	if [ -e "${NODE_PATH}" ]; then
		NODE_PATH=$(readlink -f "${NODE_PATH}")
		info "Using node: ${NODE_PATH}"
		PATH="${NODE_PATH}:${PATH}"
		break
	fi
done


# Get an open port.
PORT=$(python3 - <<- EOF
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 0))
addr = s.getsockname()
print(addr[1])
s.close()
EOF
)


# Set up a .Rprofile with some variables we want the
# running R sessions to see.
cp ~/.Renviron /tmp/.Renviron 2> /dev/null

cat <<- EOF >> /tmp/.Renviron
CI = 1
RSTUDIO_AUTOMATION_PORT = ${PORT}
RSTUDIO_AUTOMATION_REUSE_REMOTE = TRUE
RSTUDIO_AUTOMATION_CLOSE_ON_FINISH = TRUE
EOF

export R_ENVIRON_USER=/tmp/.Renviron


# Set up environment variables to ease running of automation.
export RS_NO_SPLASH=1
export RS_CRASH_HANDLER_PROMPT=false


# Remove an old automation results file if it exists.
rm -f rstudio-automation-results.xml


# NOTE: We'd like to use 'timeout' here, but for whatever reason
# the process cannot be interrupted in that scenario.
touch ~/.Xauthority
export XAUTHORITY=~/.Xauthority
xvfb-run -s "-wr -screen 0 1024x768x24" -f ~/.Xauthority npm run automation &
PID="$!"

mkdir -p screenshots
for i in `seq 1 60`; do
	if kill -0 "${PID}"; then
		sleep 60
		xwd -root -silent -display :99 | convert xwd:- png:"screenshots/screenshot-$(date +%s).png"
	else
		break
	fi
done


cat rstudio-automation-results.xml

