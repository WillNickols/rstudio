#!/usr/bin/env bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "../../../dependencies/tools/rstudio-tools.sh"


# Try to find node, and place it on the PATH.
NODE_PATHS=(
   "${SCRIPT_DIR}/../../../dependencies/common/node/${RSTUDIO_NODE_DIR}/bin"
   "/opt/rstudio-tools/dependencies/common/node/${RSTUDIO_NODE_DIR}/bin"
)

for NODE_PATH in "${NODE_PATHS[@]}"; do
	if [ -e "${NODE_PATH}" ]; then
		NODE_PATH=$(readlink -f "${NODE_PATH}")
		info "Using node: ${NODE_PATH}"
		PATH="${NODE_PATH}:${PATH}"
		break
	fi
done


# Get an open port.
PORT=$(python3 - <<- EOF
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 0))
addr = s.getsockname()
print(addr[1])
s.close()
EOF
)


# Set up a .Rprofile with some variables we want the
# running R sessions to see.
cp ~/.Renviron /tmp/.Renviron 2> /dev/null

cat <<- EOF >> /tmp/.Renviron
CI = 1
RSTUDIO_AUTOMATION_PORT = ${PORT}
RSTUDIO_AUTOMATION_REUSE_REMOTE = TRUE
RSTUDIO_AUTOMATION_CLOSE_ON_FINISH = TRUE
EOF

export R_ENVIRON_USER=/tmp/.Renviron


# Set up environment variables to ease running of automation.
export RS_NO_SPLASH=1
export RS_CRASH_HANDLER_PROMPT=false


# Remove an old automation results file if it exists.
rm -f rstudio-automation-results.xml


# NOTE: We'd like to use 'timeout' here, but for whatever reason
# the process cannot be interrupted in that scenario.
touch ~/.Xauthority
export XAUTHORITY=~/.Xauthority
export XVFBDISPLAY=:99

# Generate a cookie to use for xauth.
MCOOKIE=$(mcookie)
xauth source - <<- EOF
add ${XVFBDISPLAY} . ${MCOOKIE}
EOF

# Start the Xvfb server.
trap : USR1
(trap '' USR1; exec Xvfb "${XVFBDISPLAY}" -screen 0 1280x1024x24 -auth ~/.Xauthority) &
XVFBPID="$!"
sleep 3

FFMPEGOUT="rstudio-automation-$(date +%F.%s)"

# Start capturing video.
ffmpeg                    \
	-hide_banner          \
	-loglevel fatal       \
	-nostats              \
	-video_size 1280x1024 \
	-framerate 30         \
	-f x11grab            \
	-i "${XVFBDISPLAY}"   \
	-c:v libx264          \
	-y "${FFMPEGOUT}.mkv" &
FFMPEGPID="$!"


# Make sure we tidy up on exit.
cleanup () {

	# Clean up child processes we might have launched
	kill -SIGINT "${FFMPEGPID}" 2> /dev/null
	wait "${FFMPEGPID}"

	kill "${XVFBPID}" 2> /dev/null
	wait "${XVFBPID}"

	xauth remove "${XVFBDISPLAY}"

	# Make the video 'fast start', so we can view it in a browser
	sleep 1
	ffmpeg                    \
		-i "${FFMPEGOUT}.mkv" \
		-c copy               \
		-map 0                \
		-movflags +faststart  \
		"${FFMPEGOUT}.mp4"

	# Clean up the old output file
	rm -f "${FFMPEGOUT}.mkv"

}

trap cleanup EXIT


# Start running automation.
DISPLAY="${XVFBDISPLAY}" npm run automation &
NPMPID="$!"


# Wait for exit.
for _i in `seq 1 180`; do
	if kill -0 "${NPMPID}"; then
		sleep 1
	else
		break
	fi
done

if kill -0 "${NPMPID}"; then
	echo "automation timed out; terminating process"
	kill "${NPMPID}"
fi


# Print results.
cat rstudio-automation-results.xml
pkill rsession
exit 0

